# -*- coding: utf-8 -*-
"""test_camputChatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11nm2SFZs9DMwwrjgNh5WsoOFpReG4gSA
"""

"""
campus_chatbot.py
Campus Route & Info Chatbot (Rule-based + Dijkstra Shortest Path + Fuzzy Matching)
"""

import re
import sys
import heapq
from difflib import get_close_matches

# -------------------------
# 1) Canonical places & aliases
# -------------------------
CANONICAL_NAMES = [
    "Perpustakaan", "Grha Sabha Pramana",
    "Fakultas Kehutanan",
    "Fakultas Kedokteran Kesehatan Masyarakat Keperawatan",
    "Fakultas Kedokteran Hewan",
    "Fakultas Kedokteran Gigi",
    "Fakultas Ilmu Sosial dan Ilmu Politik",
    "Fakultas Ilmu Budaya",
    "Fakultas Hukum",
    "Fakultas MIPA",
    "Fakultas Pertanian",
    "Fakultas Peternakan",
    "Fakultas Psikologi",
    "Fakultas Teknik",
    "Fakultas Teknologi Pertanian",
    "Fakultas Geografi",
    "Fakultas Filsafat",
    "Fakultas Farmasi",
    "Fakultas Ekonomika dan Bisnis",
    "Fakultas Biologi",
    "Sekolah Pascasarjana",
    "Sekolah Vokasi",
    "Sekolah Vokasi Departemen Ekonomi dan Bisnis",
    "Wisdom Park",
    "Masjid Kampus"
]

ALIAS_MAP = {
    "perpus": "Perpustakaan", "library": "Perpustakaan",
    "gsp": "Grha Sabha Pramana",
    "teknik": "Fakultas Teknik",
    "mipa": "Fakultas MIPA",
    "biologi": "Fakultas Biologi",
    "farmasi": "Fakultas Farmasi",
    "feb": "Fakultas Ekonomika dan Bisnis",
    "fisipol": "Fakultas Ilmu Sosial dan Ilmu Politik",
    "fisip": "Fakultas Ilmu Sosial dan Ilmu Politik",
    "hukum": "Fakultas Hukum",
    "fib": "Fakultas Ilmu Budaya",
    "psikologi": "Fakultas Psikologi",
    "filsafat": "Fakultas Filsafat",
    "fildafat": "Fakultas Filsafat",  # typo fix
    "philosophy": "Fakultas Filsafat",
    "geografi": "Fakultas Geografi",
    "pertanian": "Fakultas Pertanian",
    "peternakan": "Fakultas Peternakan",
    "kehutanan": "Fakultas Kehutanan",
    "ftp": "Fakultas Teknologi Pertanian",
    "fkkmk": "Fakultas Kedokteran Kesehatan Masyarakat Keperawatan",
    "fkh": "Fakultas Kedokteran Hewan",
    "fkg": "Fakultas Kedokteran Gigi",
    "wisdom park": "Wisdom Park",
    "masjid": "Masjid Kampus",
    "vokasi": "Sekolah Vokasi",
    "pascasarjana": "Sekolah Pascasarjana"
}

# -------------------------
# 2) Campus info database
# -------------------------
campus_data = {
    "Fakultas Kehutanan": "Located near the north side of campus, close to the Faculty of Agriculture.",
    "Fakultas Kedokteran Kesehatan Masyarakat Keperawatan": "Located in the central campus area, near the hospital building.",
    "Fakultas Kedokteran Hewan": "Located near the east campus area.",
    "Fakultas Kedokteran Gigi": "Located near the Fakultas Kedokteran dan Kesehatan Masyarakat.",
    "Fakultas Ilmu Sosial dan Ilmu Politik": "Located near the library, close to the Faculty of Law.",
    "Fakultas Ilmu Budaya": "Located in front of Fakultas Ekonomika dan Bisnis.",
    "Fakultas Hukum": "Located near Fakultas Ilmu Sosial dan Politik.",
    "Fakultas MIPA": "Located near the east campus area, beside Fakultas Biologi.",
    "Fakultas Pertanian": "Located near Fakultas Kehutanan and Wisdom Park.",
    "Fakultas Peternakan": "Located close to Fakultas Kedokteran Hewan.",
    "Fakultas Psikologi": "Located near Fakultas Filsafat.",
    "Fakultas Teknik": "Located near Fakultas MIPA, in the western area.",
    "Fakultas Teknologi Pertanian": "Located between Fakultas Kehutanan and Fakultas Pertanian.",
    "Fakultas Geografi": "Located near Fakultas Biologi and Fakultas FMIPA.",
    "Fakultas Filsafat": "Located beside Fakultas Ekonomika dan Bisnis.",
    "Fakultas Farmasi": "Located near Fakultas MIPA.",
    "Fakultas Ekonomika dan Bisnis": "Located near the Graha Saba Pramana.",
    "Fakultas Biologi": "Located near Fakultas MIPA.",
    "Sekolah Pascasarjana": "Located at Jalan Teknika Utara.",
    "Sekolah Vokasi": "Located at Sekip Unit 1, Blimbing Sari.",
    "Sekolah Vokasi Departemen Ekonomi dan Bisnis": "Located near Masjid Kampus.",
    "Perpustakaan": "Main library located between Balairung and Graha Saba Pramana.",
    "Wisdom Park": "Located near Fakultas Kedokteran Hewan, used for relaxation and outdoor study.",
    "Masjid Kampus": "Located near Wisdom Park.",
    "Grha Sabha Pramana": "UGM’s main hall, often used for graduation and major events."
}

# -------------------------
# 3) Graph connections (UGM layout)
# -------------------------
def build_campus_graph():
    g = {}
    def connect(a, b, dist):
        a, b = a.lower(), b.lower()
        g.setdefault(a, []).append((b, dist))
        g.setdefault(b, []).append((a, dist))

    # --- Central ---
    connect("perpustakaan", "grha sabha pramana", 150)
    connect("grha sabha pramana", "fakultas mipa", 300)
    connect("grha sabha pramana", "fakultas ekonomika dan bisnis", 200)
    connect("fakultas mipa", "fakultas teknik", 150)
    connect("fakultas mipa", "fakultas biologi", 100)

    # --- Around FEB and FIB ---
    connect("fakultas ekonomika dan bisnis", "fakultas ilmu budaya", 100)
    connect("fakultas ilmu budaya", "fakultas hukum", 100)
    connect("fakultas hukum", "fakultas ilmu sosial dan ilmu politik", 150)
    connect("fakultas ilmu sosial dan ilmu politik", "fakultas psikologi", 150)
    connect("fakultas psikologi", "fakultas filsafat", 100)
    connect("fakultas filsafat", "fakultas ekonomika dan bisnis", 100)  # closed loop near FEB

    # --- Agriculture & Forestry area ---
    connect("fakultas teknik", "fakultas teknologi pertanian", 250)
    connect("fakultas teknologi pertanian", "fakultas pertanian", 200)
    connect("fakultas pertanian", "fakultas kehutanan", 200)
    connect("fakultas kehutanan", "fakultas geografi", 250)

    # --- Health and east side ---
    connect("fakultas mipa", "fakultas farmasi", 100)
    connect("fakultas farmasi", "fakultas kedokteran kesehatan masyarakat keperawatan", 200)
    connect("fakultas kedokteran kesehatan masyarakat keperawatan", "fakultas kedokteran gigi", 100)
    connect("fakultas kedokteran kesehatan masyarakat keperawatan", "fakultas kedokteran hewan", 400)
    connect("fakultas kedokteran hewan", "wisdom park", 150)
    connect("wisdom park", "masjid kampus", 100)

    # --- Vocational area ---
    connect("fakultas ekonomika dan bisnis", "sekolah vokasi departemen ekonomi dan bisnis", 200)
    connect("sekolah vokasi departemen ekonomi dan bisnis", "masjid kampus", 150)
    connect("sekolah vokasi", "sekolah pascasarjana", 250)

    for name in CANONICAL_NAMES + ["grha sabha pramana"]:
        g.setdefault(name.lower(), [])

    return g

# -------------------------
# 4) Dijkstra shortest path
# -------------------------
def dijkstra(graph, start, goal):
    start, goal = start.lower(), goal.lower()
    if start not in graph or goal not in graph:
        return None, None
    pq = [(0, [start])]
    visited = set()
    while pq:
        (dist, path) = heapq.heappop(pq)
        node = path[-1]
        if node == goal:
            return [p.title() for p in path], dist
        if node in visited:
            continue
        visited.add(node)
        for (neighbor, cost) in graph[node]:
            if neighbor not in visited:
                heapq.heappush(pq, (dist + cost, path + [neighbor]))
    return None, None

# -------------------------
# 5) Normalization & intent detection
# -------------------------
def normalize_name(raw):
    if not raw:
        return None
    t = raw.lower().strip()
    if t in ALIAS_MAP:
        return ALIAS_MAP[t]
    for alias in ALIAS_MAP:
        if alias in t:
            return ALIAS_MAP[alias]
    for c in CANONICAL_NAMES:
        if c.lower() == t:
            return c
    match = get_close_matches(t, [c.lower() for c in CANONICAL_NAMES], n=1, cutoff=0.5)
    if match:
        for c in CANONICAL_NAMES:
            if c.lower() == match[0]:
                return c
    return None

def is_route_request(text):
    return any(k in text.lower() for k in ["route", "find", "path", "rute", "dari", "ke", "to"])

def is_location_question(text):
    return any(k in text.lower() for k in ["where", "dimana", "letak", "location"])

def extract_start_goal(text):
    text = text.lower()
    m = re.search(r'from\s+(.+?)\s+(to|->)\s+(.+)', text)
    if m:
        return normalize_name(m.group(1)), normalize_name(m.group(3))
    m = re.search(r'dari\s+(.+?)\s+ke\s+(.+)', text)
    if m:
        return normalize_name(m.group(1)), normalize_name(m.group(2))
    return None, None

# -------------------------
# 6) Responses
# -------------------------
def format_directions(path, dist):
    if not path:
        return "Maaf, saya tidak menemukan jalur antara tempat itu di peta saya."
    return f"Rute: {' → '.join(path)} (± {dist} meter)"

# -------------------------
# 7) Chatbot main loop
# -------------------------
def cli_main():
    graph = build_campus_graph()
    print("=== Campus Route & Info Chatbot (UGM) ===")
    print("Tanya arah: 'Find route from Perpus to Teknik' atau 'Rute dari Perpustakaan ke MIPA'.")
    print("Tanya lokasi: 'Where is FEB?' atau 'Dimana Fakultas Farmasi?'\n")

    while True:
        user = input("You: ").strip()
        if user.lower() in ["exit", "quit"]:
            print("Chatbot: Sampai jumpa! 👋")
            break

        # Location question
        if is_location_question(user):
            place = normalize_name(user)
            if not place:
                for name in CANONICAL_NAMES:
                    if name.lower() in user.lower():
                        place = name
                        break
            if place and place in campus_data:
                print("Chatbot:", campus_data[place])
            else:
                print("Chatbot: Saya tidak punya informasi tentang tempat itu.")
            continue

        # Route question
        if is_route_request(user):
            start, goal = extract_start_goal(user)
            if not start or not goal:
                print("Chatbot: Mohon sebutkan titik awal dan tujuan, misalnya 'from Perpustakaan to Fakultas Teknik'.")
                continue
            path, dist = dijkstra(graph, start, goal)
            print("Chatbot:", format_directions(path, dist))
            continue

        print("Chatbot: Saya bisa bantu arah atau lokasi. Coba tanya 'Find route from Perpus to Teknik' atau 'Where is FEB?'.")

# -------------------------
# 7b) Streamlit interface
# -------------------------
def streamlit_app():
    import streamlit as st

    st.set_page_config(page_title="Campus Route & Info Chatbot", page_icon="🎓")
    st.title("🎓 UGM Campus Route & Info Chatbot")
    st.write("Tanyakan arah atau lokasi di kampus UGM! 🚶‍♂️📍")

    graph = build_campus_graph()

    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Display chat history
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # Input from user
    if prompt := st.chat_input("Tulis pertanyaanmu di sini..."):
        # Display user message
        st.chat_message("user").markdown(prompt)
        st.session_state.messages.append({"role": "user", "content": prompt})

        response = None

        # Determine intent
        if is_location_question(prompt):
            place = normalize_name(prompt)
            if not place:
                for name in CANONICAL_NAMES:
                    if name.lower() in prompt.lower():
                        place = name
                        break
            if place and place in campus_data:
                response = campus_data[place]
            else:
                response = "Maaf, saya tidak punya informasi tentang tempat itu."

        elif is_route_request(prompt):
            start, goal = extract_start_goal(prompt)
            if not start or not goal:
                response = "Mohon sebutkan titik awal dan tujuan, misalnya 'dari Perpustakaan ke Fakultas Teknik'."
            else:
                path, dist = dijkstra(graph, start, goal)
                response = format_directions(path, dist)
        else:
            response = (
                "Saya bisa bantu arah atau lokasi. "
                "Coba tanya 'Find route from Perpus to Teknik' atau 'Where is FEB?'."
            )

        # Display bot response
        with st.chat_message("assistant"):
            st.markdown(response)
        st.session_state.messages.append({"role": "assistant", "content": response})


# -------------------------
# 8) Entry point
# -------------------------
if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "streamlit":
        # Run as Streamlit app
        streamlit_app()
    else:
        # Run as CLI chatbot
        cli_main()